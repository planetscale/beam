// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String? @db.VarChar(1000)
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.VarChar(1000)
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    @relation("WrittenPosts")
  likedPosts    Post[]    @relation("LikedPosts")
  comments      Comment[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String    @db.Text
  contentHtml String    @db.Text
  hidden      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation("WrittenPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  likedBy     User[]    @relation("LikedPosts")
  comments    Comment[]

  @@index([authorId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int

  @@index([authorId])
  @@index([postId])
}
